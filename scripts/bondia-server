#!/usr/bin/env python3.8

from bokeh.server.auth_provider import AuthModule
import click
import logging
import panel
import pathlib
import secrets
import yaml

from chimedb.core import test_enable as chimedb_test_enable, connect as chimedb_connect

from bondia.server import BondiaServer
from bondia import auth, __version__

# This script is both to quickly start a webserver for a single session (use --show) and as a
# target for deployment via `panel serve` (make sure the config is at `/etc/bondia/bondia.conf`.

logger = logging.getLogger("bondia-server")


@click.command()
@click.option(
    "-c",
    "--configfile",
    help="Path to the bondia config file.",
    default="/etc/bondia/bondia.conf",
    show_default=True,
)
@click.option(
    "--show/--no-show",
    help="Open browser and connect to webserver.",
    default=False,
    show_default=True,
)
@click.option("-p", "--port", help="Port.", default=8008, show_default=True)
@click.option(
    "-n", "--num_procs", help="Number of processes.", default=1, show_default=True
)
@click.option(
    "--websocket_origin", help="Public hostnames which may connect to the websocket."
)
@click.option(
    "--login/--no-login",
    help="Require user authentication.",
    default=True,
    show_default=True,
)
@click.option(
    "--print-config/--no-print-config",
    help="Print the config on start.",
    default=True,
    show_default=True,
)
@click.option(
    "--chimedb-enable-test/--co-chimedb-enable-test",
    help="Use chimedb in test mode (make sure to not use production DB settings).",
    default=False,
    show_default=True,
)
def start(
    configfile,
    show,
    port,
    num_procs,
    websocket_origin,
    login,
    print_config,
    chimedb_enable_test,
):

    logging.basicConfig(level=logging.INFO)

    logger.info(f"Starting bondia-server {__version__} with config from {configfile}.")
    with pathlib.Path(configfile).open() as file:
        config = yaml.safe_load(file)
    if print_config:
        logger.info(f"Loaded config: {config}")

    if chimedb_enable_test:
        chimedb_test_enable()
    chimedb_connect(reconnect=True)

    if isinstance(websocket_origin, str):
        websocket_origin = [websocket_origin]

    # Prepare as much as possible in centralized server object
    server = BondiaServer.from_config(config)

    # Let the auth module know about the root URL
    auth.set_root_url(server.root_url)

    # Enable authentication
    kwargs = {}
    if login:
        kwargs["xsrf_cookies"] = True
        cookie_secret = secrets.token_hex()
        kwargs["cookie_secret"] = cookie_secret

        # We have to redirect to the login handler manually, because tornado doesn't know about
        # the root URL.
        kwargs["extra_patterns"] = [(r"/login", auth.CustomLoginHandler)]
        kwargs["auth_provider"] = AuthModule(auth.__file__)

    panel.serve(
        server.gui_instance,
        port=port,
        show=show,
        title="bondia | CHIME Daily Validation",
        num_procs=num_procs,
        websocket_origin=websocket_origin,
        **kwargs,
    )


if __name__ == "__main__":
    start()
