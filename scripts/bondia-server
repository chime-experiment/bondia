#!/usr/bin/env python3.8

from bokeh.server.auth_provider import AuthModule
import click
import logging
import panel
import pathlib
import secrets
import yaml

from bondia.server import BondiaServer
from bondia import auth, __version__

# This script is both to quickly start a webserver for a single session (use --show) and as a
# target for deployment via `panel serve` (make sure the config is at `/etc/bondia/bondia.conf`.

logger = logging.getLogger("bondia-server")


@click.command()
@click.option(
    "-c",
    "--configfile",
    help="Path to the bondia config file.",
    default="/etc/bondia/bondia.conf",
    show_default=True,
)
@click.option(
    "--show/--no-show",
    help="Open browser and connect to webserver.",
    default=False,
    show_default=True,
)
@click.option("-p", "--port", help="Port.", default=8008, show_default=True)
@click.option(
    "-n", "--num_procs", help="Number of processes.", default=1, show_default=True
)
@click.option(
    "--websocket_origin", help="Public hostnames which may connect to the websocket."
)
@click.option(
    "--login/--no-login",
    help="Require user authentication.",
    default=True,
    show_default=True,
)
def start(configfile, show, port, num_procs, websocket_origin, login):

    # TODO: use caput.config
    logging.basicConfig(level=logging.DEBUG)
    logger.setLevel("DEBUG")

    logger.info(f"Starting bondia-server {__version__} with config from {configfile}.")
    with pathlib.Path(configfile).open() as file:
        config = yaml.safe_load(file)
    logger.debug(f"Loaded config: {config}")

    if isinstance(websocket_origin, str):
        websocket_origin = [websocket_origin]

    # Prepare as much as possible in centralized server object
    server = BondiaServer.from_config(config)

    # Enable authentication
    kwargs = {}
    if login:
        kwargs["auth_provider"] = AuthModule(auth.__file__)
        kwargs["xsrf_cookies"] = True
        kwargs["cookie_secret"] = secrets.token_hex()

    # Create an instance of the GUI for each user session.
    def instance():
        return server.gui_instance()

    panel.serve(
        instance,
        port=port,
        show=show,
        title="bondia | CHIME Daily Validation",
        num_procs=num_procs,
        websocket_origin=websocket_origin,
        **kwargs,
    )


if __name__ == "__main__":
    start()
